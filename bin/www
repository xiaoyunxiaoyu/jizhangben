#!/usr/bin/env node
const db = require('../db/db');
db(() => {
  /**
   * Module dependencies.
   */

  var app = require('../app');
  var debug = require('debug')('18:server');
  var http = require('http');
  // var https = require('https');

  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || '80');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  // https服务
  // var server = https.createServer({
  //   key: fs.readFileSync('C:\\Certbot\\live\\www.hezhiyun.top\\privkey.pem'),
  //   cert: fs.readFileSync('C:\\Certbot\\live\\www.hezhiyun.top\\cert.pem'),
  //   ca: fs.readFileSync('C:\\Certbot\\live\\www.hezhiyun.top\\chain.pem'),
  // },app);

  // http服务
  var server2 = http.createServer(app);


  /**
   * Listen on provided port, on all network interfaces.
   */

  // server.listen(433);
  // server.on('error', onError);
  // server.on('listening', onListening);

  server2.listen(port);
  server2.on('error', onError);
  server2.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server2.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
})

